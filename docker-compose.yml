version: "3.8"
services:
  # setup:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
  #   env_file:
  #    - docker.env

  #   volumes:
  #     - ./certs:/usr/share/elasticsearch/config/certs
  #   user: "0"
  #   command: >
  #     bash -c '
  #       if [ x${ELASTIC_PASSWORD} == x ]; then
  #         echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       elif [ x${KIBANA_PASSWORD} == x ]; then
  #         echo "Set the KIBANA_PASSWORD environment variable in the .env file";
  #         exit 1;
  #       fi;
  #       if [ ! -f config/certs/ca.zip ]; then
  #         echo "Creating CA";
  #         bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
  #         unzip config/certs/ca.zip -d config/certs;
  #       fi;
  #       if [ ! -f config/certs/certs.zip ]; then
  #         echo "Creating certs";
  #         echo -ne \
  #         "instances:\n"\
  #         "  - name: es01\n"\
  #         "    dns:\n"\
  #         "      - es01\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         "  - name: es02\n"\
  #         "    dns:\n"\
  #         "      - es02\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         "  - name: es03\n"\
  #         "    dns:\n"\
  #         "      - es03\n"\
  #         "      - localhost\n"\
  #         "    ip:\n"\
  #         "      - 127.0.0.1\n"\
  #         > config/certs/instances.yml;
  #         bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
  #         unzip config/certs/certs.zip -d config/certs;
  #       fi;
  #       echo "Setting file permissions"
  #       chown -R root:root config/certs;
  #       find . -type d -exec chmod 750 \{\} \;;
  #       find . -type f -exec chmod 640 \{\} \;;
  #       echo "Waiting for Elasticsearch availability";
  #       until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
  #       echo "Setting kibana_system password";
  #       until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
  #       echo "All done!";
  #     '
  #   healthcheck:
  #     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 120
  api:
    build:
      dockerfile: ./Dockerfile
      context: .
      # target: development
    container_name: api_nest
    volumes:
      - .:/app
      - /app/node_modules
    # command: npm run start:dev
    depends_on: 
      - postgres
      - redis
      - es01
    env_file:
      - .env
    ports:
      - 8000:8000
    expose:
      - 8000
    networks:
      - postgres
  postgres:
    container_name: postgres_container
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./pgfile:/tmp
    env_file:
      - docker.env
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    links:
      - postgres:postgres
    container_name: pgadmin_container
    image: dpage/pgadmin4
    ports:
      - "8080:80"
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    env_file:
      - docker.env
    restart: unless-stopped
    depends_on: 
      - postgres
    networks:
      - postgres

  adminer:
    image: adminer
    container_name: adminer_container
    restart: always
    depends_on:
      - postgres
    networks:
      - postgres
    ports:
      - 6060:9000
  redis:
    image: "redis:alpine"
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis:/data

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_comander_container
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=qwerty
    ports:
      - "8081:8081"
    depends_on:
      - redis

  es01:
    # depends_on:
    #   setup:
    #     condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTICSEARCH_PASSWORD=admin
      - bootstrap.memory_lock=true
        - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    # mem_limit: 2000
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    healthcheck:
      # test:
      #   [
      #     "CMD-SHELL",
      #     "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      #   ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - postgres
  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
        - bootstrap.memory_lock=true
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./data02:/usr/share/elasticsearch/data
    healthcheck:
      # test:
      #   [
      #     "CMD-SHELL",
      #     "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      #     # "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      #   ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - postgres
  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    # mem_limit: 2000
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./certs:/usr/share/elasticsearch/config/certs
      - ./data03:/usr/share/elasticsearch/data
    healthcheck:
      # test:
      #   [
      #     "CMD-SHELL",
      #     "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      #     # "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
      #   ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - postgres
  # elasticsearch:
  #   image: elasticsearch:7.8.1
  #   ports:
  #     - 9200:9200
  #   environment:
  #     discovery.type: 'single-node'
  #     xpack.security.enabled: 'true'
  #     ELASTIC_PASSWORD: 'admin'
  # kibana:
  #   image: kibana:7.8.1
  #   volumes:
  #     - ./kibana.yml:/usr/share/kibana/config/kibana.yml
  #   ports:
  #     - 5601:5601

  kibana:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      es03:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:7.12.0
    volumes:
      - ./certs:/usr/share/kibana/config/certs
      - ./kibanadata:/usr/share/kibana/data
    container_name: kibana
    ports: 
      - 5601:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=admin
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    healthcheck:
      # test:
      #   [
      #     "CMD-SHELL",
      #     "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
      #   ]
      interval: 10s
      timeout: 10s
      retries: 120
    # links: 
    #   - es01
    #   - es02
    #   - es03
    networks:
      - postgres
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus_container
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - '9090:9090'
    networks:
      - postgres

  grafana:
    image: grafana/grafana:latest
    container_name: grafana_container
    restart: on-failure
    links:
      - prometheus:prometheus
    volumes:
      - ./data/grafana:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: 12345
      GF_RENDERING_SERVER_URL: http://renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
      GF_LOG_FILTERS: rendering:debug
    ports:
      - 3000:3000
    expose:
      - 3000
    networks:
      - postgres
  renderer:
    image: grafana/grafana-image-renderer:latest
    restart: on-failure
    container_name: grafana-image-renderer
    expose:
      - "8081"
    environment:
      ENABLE_METRICS: "true"
    networks:
      - postgres
    logging:
      driver: fluentd
      options:
        fluentd-address: host.docker.internal:24224
        tag: renderer

  fluent-bit:
    hostname: fluentd
    build:
      context: ./fluent-bit
      dockerfile: Dockerfile
    container_name: fluent-bit
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - postgres

  loki:
    image: grafana/loki:latest
    restart: on-failure
    container_name: loki
    expose:
      - "3100"
    networks:
      - postgres
    logging:
      driver: fluentd
      options:
        fluentd-address: host.docker.internal:24224
        tag: loki

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: on-failure
    hostname: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: master123
    ports:
      - 27017:27017
    volumes:
      - mongo_data:/data/db
    networks:
      - postgres
volumes:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
  postgres-data:
  pgadmin-data:
  mongo_data:
    driver: local

  redis:
    driver: local
  
  kibanadata:
    driver: local
  
  certs:
    driver: local

networks:
  postgres:
    driver: bridge
  elastic:
    driver: bridge