version: "3.8"
services:
  api:
    build:
      context: .
      dockerfile: ./Dockerfile
      # target: development
    volumes:
      - .:/app
      - /app/node_modules
    # command: npm run start:dev
    command: npm run start api-gateway
    depends_on: 
      - postgres
      - redis
      - es01
      - rabbitmq
    env_file:
      - .env
    ports:
      - 3000:3000
    networks:
      - postgres
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    volumes:
      - /var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
  postgres:
    container_name: postgres_container
    image: postgres:latest
    ports:
      - "5432:5432"
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
      - ./pgfile:/tmp
    env_file:
      - docker.env
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    links:
      - postgres:postgres
    container_name: pgadmin_container
    image: dpage/pgadmin4
    ports:
      - "8080:80"
    volumes:
      - ./pgadmin-data:/var/lib/pgadmin
    env_file:
      - docker.env
    restart: unless-stopped
    depends_on: 
      - postgres
    networks:
      - postgres

  adminer:
    image: adminer
    restart: always
    depends_on:
      - postgres
    networks:
      - postgres
    ports:
      - 6060:9000
  redis:
    image: "redis:alpine"
    ports:
      - "6379:6379"
    volumes:
      - redis:/data

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
        - redis

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es01
    environment:
      - node.name:es01
      - cluster.name:es-docker-cluster
      - discovery.seed_hosts:es02,es03
      - cluster.initial_master_nodes:es01,es02,es03
      - bootstrap.memory_lock:true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTICSEARCH_PASSWORD:admin
    # mem_limit: 2000
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic
  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    # mem_limit: 2000
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data02:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    # mem_limit: 2000
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data03:/usr/share/elasticsearch/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic
  kib01:
    image: docker.elastic.co/kibana/kibana:7.12.0
    container_name: kib01
    ports: 
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://esOne:9200
    depends_on: 
      - es01
      - es02
      - es03
    links: 
      - es01
      - es02
      - es03
    networks:
      - postgres
volumes:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
  postgres-data:
  pgadmin-data:

  redis:
    driver: local

networks:
  postgres:
    driver: bridge
  elastic:
    driver: bridge